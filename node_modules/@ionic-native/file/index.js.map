{"version":3,"sources":["../../../src/@ionic-native/plugins/file/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,eAAA,EAAiB,MAAA,EAAQ,YAAA,EAAc,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AA0kB9F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AASH;IAA0B,wBAAiB;IAR3C;QAAA,qEA0zBC;QAvuBC,sBAAgB,GAAQ;YACtB,CAAC,EAAE,eAAe;YAClB,CAAC,EAAE,cAAc;YACjB,CAAC,EAAE,WAAW;YACd,CAAC,EAAE,kBAAkB;YACrB,CAAC,EAAE,cAAc;YACjB,CAAC,EAAE,6BAA6B;YAChC,CAAC,EAAE,mBAAmB;YACtB,CAAC,EAAE,YAAY;YACf,CAAC,EAAE,0BAA0B;YAC7B,EAAE,EAAE,oBAAoB;YACxB,EAAE,EAAE,mBAAmB;YACvB,EAAE,EAAE,iBAAiB;YACrB,EAAE,EAAE,kBAAkB;YACtB,EAAE,EAAE,cAAc;SACnB,CAAC;;IAwtBJ,CAAC;IAttBC;;;OAGG;IAEH,+BAAgB,GAAhB;QACE,MAAM,CAAC,IAAI,OAAO,CAAM,UAAC,OAAO,EAAE,MAAM;YACtC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,kBAAkB,EAAE,EAAE,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IAEH,uBAAQ,GAAR,UAAS,IAAY,EAAE,GAAW;QAChC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,OAAO,GAAG,gCAAgC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAM,GAAG,CAAC,CAAC;QAClC,CAAC;QAED,IAAI,QAAQ,GAAG,IAAI,GAAG,GAAG,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC;aACtC,IAAI,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;;;OASG;IAEH,wBAAS,GAAT,UAAU,IAAY,EAAE,OAAe,EAAE,OAAgB;QADzD,iBAoBC;QAlBC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,OAAO,GAAG,gCAAgC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAM,GAAG,CAAC,CAAC;QAClC,CAAC;QAED,IAAI,OAAO,GAAU;YACnB,MAAM,EAAE,IAAI;SACb,CAAC;QAEF,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACb,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;QAC3B,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;aAClC,IAAI,CAAC,UAAC,GAAG;YACR,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IAEH,wBAAS,GAAT,UAAU,IAAY,EAAE,OAAe;QADvC,iBAeC;QAbC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,OAAO,GAAG,gCAAgC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAM,GAAG,CAAC,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;aAClC,IAAI,CAAC,UAAC,GAAG;YACR,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5D,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,EAAE;YACP,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;;OAQG;IAEH,sBAAO,GAAP,UAAQ,IAAY,EAAE,OAAe,EAAE,OAAe,EAAE,UAAkB;QAD1E,iBAoBC;QAlBC,UAAU,GAAG,UAAU,IAAI,OAAO,CAAC;QAEnC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,OAAO,GAAG,gCAAgC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAM,GAAG,CAAC,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;aAClC,IAAI,CAAC,UAAC,GAAG;YACR,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5D,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,KAAK;YACV,MAAM,CAAC,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;iBACrC,IAAI,CAAC,UAAC,KAAK;gBACV,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;;OAQG;IAEH,sBAAO,GAAP,UAAQ,IAAY,EAAE,OAAe,EAAE,OAAe,EAAE,UAAkB;QAD1E,iBAkBC;QAhBC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,OAAO,GAAG,gCAAgC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAM,GAAG,CAAC,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;aAClC,IAAI,CAAC,UAAC,GAAG;YACR,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5D,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,KAAK;YACV,MAAM,CAAC,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;iBACrC,IAAI,CAAC,UAAC,KAAK;gBACV,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IAEH,sBAAO,GAAP,UAAQ,IAAY,EAAE,OAAe;QADrC,iBAgBC;QAdC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,OAAO,GAAG,gCAAgC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAU,GAAG,CAAC,CAAC;QACtC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;aAClC,IAAI,CAAC,UAAC,GAAG;YACR,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAC9E,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,EAAE;YACP,IAAI,MAAM,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC;YAC/B,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IAEH,gCAAiB,GAAjB,UAAkB,IAAY,EAAE,OAAe;QAD/C,iBAeC;QAbC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,OAAO,GAAG,gCAAgC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAe,GAAG,CAAC,CAAC;QAC3C,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;aAClC,IAAI,CAAC,UAAC,GAAG;YACR,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5D,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,EAAE;YACP,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IAEH,wBAAS,GAAT,UAAU,IAAY,EAAE,IAAY;QAClC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,OAAO,GAAG,2BAA2B,CAAC;YAC1C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAM,GAAG,CAAC,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,IAAI,GAAG,IAAI,CAAC;aAC/C,IAAI,CAAC,UAAC,GAAG;YACR,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;gBACf,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC;gBAC5B,GAAG,CAAC,OAAO,GAAG,qBAAqB,CAAC;gBACpC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAU,GAAG,CAAC,CAAC;YACtC,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;;;OASG;IAEH,yBAAU,GAAV,UAAW,IAAY,EAAE,QAAgB,EAAE,OAAgB;QAD3D,iBAoBC;QAlBC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,OAAO,GAAG,gCAAgC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAM,GAAG,CAAC,CAAC;QAClC,CAAC;QAED,IAAI,OAAO,GAAU;YACnB,MAAM,EAAE,IAAI;SACb,CAAC;QAEF,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACb,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;QAC3B,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;aAClC,IAAI,CAAC,UAAC,GAAG;YACR,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IAEH,yBAAU,GAAV,UAAW,IAAY,EAAE,QAAgB;QADzC,iBAeC;QAbC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,OAAO,GAAG,gCAAgC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAM,GAAG,CAAC,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;aAClC,IAAI,CAAC,UAAC,GAAG;YACR,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QACxD,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,EAAE;YACP,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;OAOG;IAEH,wBAAS,GAAT,UAAU,IAAY,EAAE,QAAgB,EAC9B,IAAiC,EAAE,OAA2B;QAFxE,iBAqBC;QAnB4C,wBAAA,EAAA,YAA2B;QACtE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAM,GAAG,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;YAC7B,GAAG,CAAC,OAAO,GAAG,gCAAgC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC;QAED,IAAM,WAAW,GAAU;YACzB,MAAM,EAAE,CAAC,OAAO,CAAC,MAAM;YACvB,SAAS,EAAE,CAAC,OAAO,CAAC,OAAO;SAC5B,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;aAClC,IAAI,CAAC,UAAC,cAA8B;YACnC,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,cAAc,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC7D,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,SAAoB;YACzB,MAAM,CAAC,KAAI,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;OAOG;IACK,6BAAc,GAAtB,UAAuB,EAAa,EAAE,IAAiC,EAAE,OAAsB;QAA/F,iBAcC;QAbC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;aACzB,IAAI,CAAC,UAAC,MAAM;YACX,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBACnB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC7B,CAAC;YAED,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACpC,CAAC;YAED,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC;aACD,IAAI,CAAC,cAAM,OAAA,EAAE,EAAF,CAAE,CAAC,CAAC;IACpB,CAAC;IAGD;;;;;;OAMG;IAEH,gCAAiB,GAAjB,UAAkB,IAAY,EAAE,QAAgB,EAAE,IAAmB;QACnE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IACjE,CAAC;IAED;;;;;;OAMG;IAEH,yBAAU,GAAV,UAAW,IAAY,EAAE,IAAY;QACnC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAS,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IACnD,CAAC;IAED;;;;;;;;OAQG;IAEH,4BAAa,GAAb,UAAc,IAAY,EAAE,IAAY;QACtC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAS,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;IACtD,CAAC;IAED;;;;;OAKG;IAEH,iCAAkB,GAAlB,UAAmB,IAAY,EAAE,IAAY;QAC3C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAS,IAAI,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;IAC3D,CAAC;IAED;;;;;OAKG;IAEH,gCAAiB,GAAjB,UAAkB,IAAY,EAAE,IAAY;QAC1C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAc,IAAI,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;IAC/D,CAAC;IAEO,uBAAQ,GAAhB,UAAoB,IAAY,EAAE,IAAY,EAAE,MAA2D;QAA3G,iBAgCC;QA/BC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,OAAO,GAAG,gCAAgC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAM,GAAG,CAAC,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;aAClC,IAAI,CAAC,UAAC,cAA8B;YACnC,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QAC/D,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,SAAoB;YACzB,IAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;YAChC,MAAM,CAAC,IAAI,OAAO,CAAI,UAAC,OAAO,EAAE,MAAM;gBACpC,MAAM,CAAC,SAAS,GAAG;oBACjB,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,SAAS,IAAI,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;wBAC1D,OAAO,CAAS,MAAM,CAAC,MAAM,CAAC,CAAC;oBACjC,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,KAAK,SAAS,IAAI,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;wBAC/D,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBACvB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC,CAAC;oBAC1D,CAAC;gBACH,CAAC,CAAC;gBAEF,SAAS,CAAC,IAAI,CAAC,UAAA,IAAI;oBACjB,MAAM,CAAC,WAAS,MAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAC/C,CAAC,EAAE,UAAA,KAAK;oBACN,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;YAEL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;;OAQG;IAEH,uBAAQ,GAAR,UAAS,IAAY,EAAE,QAAgB,EAAE,OAAe,EAAE,WAAmB;QAD7E,iBAoBC;QAlBC,WAAW,GAAG,WAAW,IAAI,QAAQ,CAAC;QAEtC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,OAAO,GAAG,gCAAgC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAM,GAAG,CAAC,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;aAClC,IAAI,CAAC,UAAC,GAAG;YACR,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QACxD,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,KAAK;YACV,MAAM,CAAC,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;iBACrC,IAAI,CAAC,UAAC,KAAK;gBACV,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;YAC9C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;;OAQG;IAEH,uBAAQ,GAAR,UAAS,IAAY,EAAE,QAAgB,EAAE,OAAe,EAAE,WAAmB;QAD7E,iBAoBC;QAlBC,WAAW,GAAG,WAAW,IAAI,QAAQ,CAAC;QAEtC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,OAAO,GAAG,gCAAgC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAM,GAAG,CAAC,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;aAClC,IAAI,CAAC,UAAC,GAAG;YACR,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QACxD,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,KAAK;YACV,MAAM,CAAC,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;iBACrC,IAAI,CAAC,UAAC,KAAK;gBACV,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;YAC9C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACK,+BAAgB,GAAxB,UAAyB,GAAc;QACrC,IAAI,CAAC;YACH,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAChD,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC;IAED;;;;OAIG;IAEH,wCAAyB,GAAzB,UAA0B,OAAe;QADzC,iBAeC;QAbC,MAAM,CAAC,IAAI,OAAO,CAAQ,UAAC,OAAO,EAAE,MAAM;YACxC,IAAI,CAAC;gBACH,MAAM,CAAC,yBAAyB,CAAC,OAAO,EAAE,UAAC,KAAY;oBACrD,OAAO,CAAC,KAAK,CAAC,CAAC;gBACjB,CAAC,EAAE,UAAC,GAAG;oBACL,KAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;oBAC3B,MAAM,CAAC,GAAG,CAAC,CAAC;gBACd,CAAC,CAAC,CAAC;YACL,CAAC;YAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACZ,KAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;gBAC1B,MAAM,CAAC,EAAE,CAAC,CAAC;YACb,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IAEH,kCAAmB,GAAnB,UAAoB,YAAoB;QACtC,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,YAAY,CAAC;aAChD,IAAI,CAAC,UAAC,EAAE;YACP,EAAE,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;gBACnB,MAAM,CAAiB,EAAE,CAAC;YAC5B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAM,GAAG,GAAG,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC;gBAC9B,GAAG,CAAC,OAAO,GAAG,0BAA0B,CAAC;gBACzC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAiB,GAAG,CAAC,CAAC;YAC7C,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IAEH,2BAAY,GAAZ,UAAa,cAA8B,EAAE,aAAqB,EAAE,KAAY;QADhF,iBAeC;QAbC,MAAM,CAAC,IAAI,OAAO,CAAiB,UAAC,OAAO,EAAE,MAAM;YACjD,IAAI,CAAC;gBACH,cAAc,CAAC,YAAY,CAAC,aAAa,EAAE,KAAK,EAAE,UAAC,EAAE;oBACnD,OAAO,CAAC,EAAE,CAAC,CAAC;gBACd,CAAC,EAAE,UAAC,GAAG;oBACL,KAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;oBAC3B,MAAM,CAAC,GAAG,CAAC,CAAC;gBACd,CAAC,CAAC,CAAC;YACL,CAAC;YAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACZ,KAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;gBAC1B,MAAM,CAAC,EAAE,CAAC,CAAC;YACb,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IAEH,sBAAO,GAAP,UAAQ,cAA8B,EAAE,QAAgB,EAAE,KAAY;QADtE,iBAaC;QAXC,MAAM,CAAC,IAAI,OAAO,CAAY,UAAC,OAAO,EAAE,MAAM;YAC5C,IAAI,CAAC;gBACH,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,UAAC,GAAG;oBACnD,KAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;oBAC3B,MAAM,CAAC,GAAG,CAAC,CAAC;gBACd,CAAC,CAAC,CAAC;YACL,CAAC;YAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACZ,KAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;gBAC1B,MAAM,CAAC,EAAE,CAAC,CAAC;YACb,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,qBAAM,GAAd,UAAe,EAAS;QAAxB,iBASC;QARC,MAAM,CAAC,IAAI,OAAO,CAAe,UAAC,OAAO,EAAE,MAAM;YAC/C,EAAE,CAAC,MAAM,CAAC;gBACR,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;YAC9C,CAAC,EAAE,UAAC,GAAG;gBACL,KAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC3B,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,mBAAI,GAAZ,UAAa,IAAW,EAAE,OAAuB,EAAE,OAAe;QAAlE,iBASC;QARC,MAAM,CAAC,IAAI,OAAO,CAAQ,UAAC,OAAO,EAAE,MAAM;YACxC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,EAAE,UAAC,KAAK;gBAClC,OAAO,CAAC,KAAK,CAAC,CAAC;YACjB,CAAC,EAAE,UAAC,GAAG;gBACL,KAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC3B,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,mBAAI,GAAZ,UAAa,IAAW,EAAE,OAAuB,EAAE,OAAe;QAAlE,iBASC;QARC,MAAM,CAAC,IAAI,OAAO,CAAQ,UAAC,OAAO,EAAE,MAAM;YACxC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,EAAE,UAAC,KAAK;gBAClC,OAAO,CAAC,KAAK,CAAC,CAAC;YACjB,CAAC,EAAE,UAAC,GAAG;gBACL,KAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC3B,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,0BAAW,GAAnB,UAAoB,EAAmB;QAAvC,iBASC;QARC,MAAM,CAAC,IAAI,OAAO,CAAU,UAAC,OAAO,EAAE,MAAM;YAC1C,EAAE,CAAC,WAAW,CAAC,UAAC,OAAO;gBACrB,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,EAAE,UAAC,GAAG;gBACL,KAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC3B,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,qBAAM,GAAd,UAAe,EAAkB;QAAjC,iBASC;QARC,MAAM,CAAC,IAAI,OAAO,CAAe,UAAC,OAAO,EAAE,MAAM;YAC/C,EAAE,CAAC,iBAAiB,CAAC;gBACnB,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;YAC9C,CAAC,EAAE,UAAC,GAAG;gBACL,KAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC3B,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,2BAAY,GAApB,UAAqB,EAAa;QAAlC,iBASC;QARC,MAAM,CAAC,IAAI,OAAO,CAAa,UAAC,OAAO,EAAE,MAAM;YAC7C,EAAE,CAAC,YAAY,CAAC,UAAC,MAAM;gBACrB,OAAO,CAAC,MAAM,CAAC,CAAC;YAClB,CAAC,EAAE,UAAC,GAAG;gBACL,KAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC3B,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,oBAAK,GAAb,UAAc,MAAkB,EAAE,EAA+B;QAC/D,EAAE,CAAC,CAAC,EAAE,YAAY,IAAI,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC5C,CAAC;QAED,MAAM,CAAC,IAAI,OAAO,CAAM,UAAC,OAAO,EAAE,MAAM;YACtC,MAAM,CAAC,UAAU,GAAG,UAAC,GAAG;gBACtB,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;oBACjB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACvB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,CAAC,GAAG,CAAC,CAAC;gBACf,CAAC;YACH,CAAC,CAAC;YACF,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,gCAAiB,GAAzB,UAA0B,MAAkB,EAAE,IAAU;QACtD,IAAM,UAAU,GAAG,IAAI,GAAG,IAAI,CAAC;QAC/B,IAAI,WAAW,GAAG,CAAC,CAAC;QAEpB;YACE,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,CAAC;YAC3D,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,WAAW,GAAG,IAAI,CAAC,CAAC;YAE1D,WAAW,IAAI,IAAI,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACtB,CAAC;QAED,MAAM,CAAC,IAAI,OAAO,CAAM,UAAC,OAAO,EAAE,MAAM;YACtC,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;YACxB,MAAM,CAAC,OAAO,GAAG;gBACf,EAAE,CAAC,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC5B,cAAc,EAAE,CAAC;gBACnB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,EAAE,CAAC;gBACZ,CAAC;YACH,CAAC,CAAC;YACF,cAAc,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;IACI,eAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,mBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA3yBA;QADC,eAAe;;sDACa;IAM7B;QADC,eAAe;;6DACoB;IAMpC;QADC,eAAe;;+CACM;IAOtB;QADC,eAAe;;gDACO;IAMvB;QADC,eAAe;;qEAC4B;IAM5C;QADC,eAAe;;uDACc;IAM9B;QADC,eAAe;;wDACe;IAM/B;QADC,eAAe;;uDACc;IAM9B;QADC,eAAe;;+CACM;IAMtB;QADC,eAAe;;qDACY;IAM5B;QADC,eAAe;;oDACW;IAM3B;QADC,eAAe;;iDACQ;IAwBxB;QADC,YAAY,EAAE;;;;gDAKd;IAUD;QADC,YAAY,EAAE;;;;wCAad;IAaD;QADC,YAAY,EAAE;;;;yCAoBd;IAUD;QADC,YAAY,EAAE;;;;yCAed;IAYD;QADC,YAAY,EAAE;;;;uCAoBd;IAYD;QADC,YAAY,EAAE;;;;uCAkBd;IAUD;QADC,YAAY,EAAE;;;;uCAgBd;IAUD;QADC,YAAY,EAAE;;;;iDAed;IAUD;QADC,YAAY,EAAE;;;;yCAkBd;IAaD;QADC,YAAY,EAAE;;;;0CAoBd;IAUD;QADC,YAAY,EAAE;;;;0CAed;IAWD;QADC,YAAY,EAAE;;;;yCAqBd;IAmCD;QADC,YAAY,EAAE;;;;iDAGd;IAUD;QADC,YAAY,EAAE;;;;0CAGd;IAYD;QADC,YAAY,EAAE;;;;6CAGd;IASD;QADC,YAAY,EAAE;;;;kDAGd;IASD;QADC,YAAY,EAAE;;;;iDAGd;IA8CD;QADC,YAAY,EAAE;;;;wCAoBd;IAYD;QADC,YAAY,EAAE;;;;wCAoBd;IAiBD;QADC,YAAY,EAAE;;;;yDAed;IAQD;QADC,YAAY,EAAE;;;;mDAYd;IAUD;QADC,YAAY,EAAE;;;;4CAed;IAUD;QADC,YAAY,EAAE;;;;uCAad;IAvqBU,IAAI;QARhB,MAAM,CAAC;YACN,UAAU,EAAE,MAAM;YAClB,MAAM,EAAE,qBAAqB;YAC7B,SAAS,EAAE,cAAc;YACzB,IAAI,EAAE,+CAA+C;YACrD,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC;SAC7D,CAAC;OAEW,IAAI,CAkzBhB;IAAD,WAAC;CAlzBD,AAkzBC,CAlzByB,iBAAiB,GAkzB1C;SAlzBY,IAAI","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CordovaProperty, Plugin, CordovaCheck, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface IFile extends Blob {\n  /**\n   * Name of the file, without path information\n   */\n  name: string;\n  /**\n   * Last modified date\n   */\n  lastModified: number;\n  /**\n   * Last modified date\n   */\n  lastModifiedDate: number;\n  /**\n   * Size in bytes\n   */\n  size: number;\n  /**\n   * File mime type\n   */\n  type: string;\n  localURL: string;\n  start: number;\n  end: number;\n  /**\n   * Returns a \"slice\" of the file. Since Cordova Files don't contain the actual\n   * content, this really returns a File with adjusted start and end.\n   * Slices of slices are supported.\n   * @param start {Number} The index at which to start the slice (inclusive).\n   * @param end {Number} The index at which to end the slice (exclusive).\n   */\n  slice(start: number, end: number): Blob;\n}\n\nexport interface LocalFileSystem {\n\n  /**\n   * Used for storage with no guarantee of persistence.\n   */\n  TEMPORARY: number;\n\n  /**\n   * Used for storage that should not be removed by the user agent without application or user permission.\n   */\n  PERSISTENT: number;\n\n  /**\n   * Requests a filesystem in which to store application data.\n   * @param type Whether the filesystem requested should be persistent, as defined above. Use one of TEMPORARY or PERSISTENT.\n   * @param size This is an indicator of how much storage space, in bytes, the application expects to need.\n   * @param successCallback The callback that is called when the user agent provides a filesystem.\n   * @param errorCallback A callback that is called when errors happen, or when the request to obtain the filesystem is denied.\n   */\n  requestFileSystem(type: number, size: number, successCallback: FileSystemCallback, errorCallback?: ErrorCallback): void;\n\n  /**\n   * Allows the user to look up the Entry for a file or directory referred to by a local URL.\n   * @param url A URL referring to a local file in a filesystem accessable via this API.\n   * @param successCallback A callback that is called to report the Entry to which the supplied URL refers.\n   * @param errorCallback A callback that is called when errors happen, or when the request to obtain the Entry is denied.\n   */\n  resolveLocalFileSystemURL(url: string, successCallback: EntryCallback, errorCallback?: ErrorCallback): void;\n\n  /**\n   * see requestFileSystem.\n   */\n  webkitRequestFileSystem(type: number, size: number, successCallback: FileSystemCallback, errorCallback?: ErrorCallback): void;\n}\n\nexport interface Metadata {\n  /**\n   * This is the time at which the file or directory was last modified.\n   * @readonly\n   */\n  modificationTime: Date;\n\n  /**\n   * The size of the file, in bytes. This must return 0 for directories.\n   * @readonly\n   */\n  size: number;\n}\n\nexport interface Flags {\n  /**\n   * Used to indicate that the user wants to create a file or directory if it was not previously there.\n   */\n  create?: boolean;\n\n  /**\n   * By itself, exclusive must have no effect. Used with create, it must cause getFile and getDirectory to fail if the target path already exists.\n   */\n  exclusive?: boolean;\n}\n\n/**\n * This export interface represents a file system.\n */\nexport interface FileSystem {\n  /**\n   * This is the name of the file system. The specifics of naming filesystems is unspecified, but a name must be unique across the list of exposed file systems.\n   * @readonly\n   */\n  name: string;\n\n  /**\n   * The root directory of the file system.\n   * @readonly\n   */\n  root: DirectoryEntry;\n\n  toJSON(): string;\n\n  encodeURIPath(path: string): string;\n\n}\n\nexport interface Entry {\n\n  /**\n   * Entry is a file.\n   */\n  isFile: boolean;\n\n  /**\n   * Entry is a directory.\n   */\n  isDirectory: boolean;\n\n  /**\n   * Look up metadata about this entry.\n   * @param successCallback A callback that is called with the time of the last modification.\n   * @param errorCallback ErrorCallback A callback that is called when errors happen.\n   */\n  getMetadata(successCallback: MetadataCallback, errorCallback?: ErrorCallback): void;\n\n  /**\n   * Set the metadata of the entry.\n   * @param successCallback {Function} is called with a Metadata object\n   * @param errorCallback {Function} is called with a FileError\n   * @param metadataObject {Metadata} keys and values to set\n   */\n  setMetadata(successCallback: MetadataCallback, errorCallback: ErrorCallback, metadataObject: Metadata): void;\n\n  /**\n   * The name of the entry, excluding the path leading to it.\n   */\n  name: string;\n\n  /**\n   * The full absolute path from the root to the entry.\n   */\n  fullPath: string;\n\n  /**\n   * The file system on which the entry resides.\n   */\n  filesystem: FileSystem;\n\n  /**\n   * an alternate URL which can be used by native webview controls, for example media players.\n   */\n  nativeURL: string;\n\n  /**\n   * Move an entry to a different location on the file system. It is an error to try to:\n   *\n   * <ui>\n   * <li>move a directory inside itself or to any child at any depth;</li>\n   * <li>move an entry into its parent if a name different from its current one isn't provided;</li>\n   * <li>move a file to a path occupied by a directory;</li>\n   * <li>move a directory to a path occupied by a file;</li>\n   * <li>move any element to a path occupied by a directory which is not empty.</li>\n   * <ul>\n   *\n   * A move of a file on top of an existing file must attempt to delete and replace that file.\n   * A move of a directory on top of an existing empty directory must attempt to delete and replace that directory.\n   */\n  moveTo(parent: DirectoryEntry, newName?: string, successCallback?: EntryCallback, errorCallback?: ErrorCallback): void;\n\n  /**\n   * Copy an entry to a different location on the file system. It is an error to try to:\n   *\n   * <ul>\n   * <li> copy a directory inside itself or to any child at any depth;</li>\n   * <li> copy an entry into its parent if a name different from its current one isn't provided;</li>\n   * <li> copy a file to a path occupied by a directory;</li>\n   * <li> copy a directory to a path occupied by a file;</li>\n   * <li> copy any element to a path occupied by a directory which is not empty.</li>\n   * <li> A copy of a file on top of an existing file must attempt to delete and replace that file.</li>\n   * <li> A copy of a directory on top of an existing empty directory must attempt to delete and replace that directory.</li>\n   * </ul>\n   *\n   * Directory copies are always recursive--that is, they copy all contents of the directory.\n   */\n  copyTo(parent: DirectoryEntry, newName?: string, successCallback?: EntryCallback, errorCallback?: ErrorCallback): void;\n\n  /**\n   * Returns a URL that can be used to identify this entry. Unlike the URN defined in [FILE-API-ED], it has no specific expiration; as it describes a location on disk, it should be valid at least as long as that location exists.\n   */\n  toURL(): string;\n\n  /**\n   * Return a URL that can be passed across the bridge to identify this entry.\n   * @return string URL that can be passed across the bridge to identify this entry\n   */\n  toInternalURL(): string;\n\n  /**\n   * Deletes a file or directory. It is an error to attempt to delete a directory that is not empty. It is an error to attempt to delete the root directory of a filesystem.\n   * @param successCallback A callback that is called on success.\n   * @param errorCallback A callback that is called when errors happen.\n   */\n  remove(successCallback: VoidCallback, errorCallback?: ErrorCallback): void;\n\n  /**\n   * Look up the parent DirectoryEntry containing this Entry. If this Entry is the root of its filesystem, its parent is itself.\n   * @param successCallback A callback that is called to return the parent Entry.\n   * @param errorCallback A callback that is called when errors happen.\n   */\n  getParent(successCallback: DirectoryEntryCallback, errorCallback?: ErrorCallback): void;\n}\n\n/**\n * This export interface represents a directory on a file system.\n */\nexport interface DirectoryEntry extends Entry {\n  /**\n   * Creates a new DirectoryReader to read Entries from this Directory.\n   */\n  createReader(): DirectoryReader;\n\n  /**\n   * Creates or looks up a file.\n   * @param path Either an absolute path or a relative path from this DirectoryEntry to the file to be looked up or created. It is an error to attempt to create a file whose immediate parent does not yet exist.\n   * @param options\n   *     <ul>\n   *     <li>If create and exclusive are both true, and the path already exists, getFile must fail.</li>\n   *     <li>If create is true, the path doesn't exist, and no other error occurs, getFile must create it as a zero-length file and return a corresponding FileEntry.</li>\n   *     <li>If create is not true and the path doesn't exist, getFile must fail.</li>\n   *     <li>If create is not true and the path exists, but is a directory, getFile must fail.</li>\n   *     <li>Otherwise, if no other error occurs, getFile must return a FileEntry corresponding to path.</li>\n   *     </ul>\n   * @param successCallback A callback that is called to return the File selected or created.\n   * @param errorCallback A callback that is called when errors happen.\n   */\n  getFile(path: string, options?: Flags, successCallback?: FileEntryCallback, errorCallback?: ErrorCallback): void;\n\n  /**\n   * Creates or looks up a directory.\n   * @param path Either an absolute path or a relative path from this DirectoryEntry to the directory to be looked up or created. It is an error to attempt to create a directory whose immediate parent does not yet exist.\n   * @param options\n   *     <ul>\n   *     <li>If create and exclusive are both true and the path already exists, getDirectory must fail.</li>\n   *     <li>If create is true, the path doesn't exist, and no other error occurs, getDirectory must create and return a corresponding DirectoryEntry.</li>\n   *     <li>If create is not true and the path doesn't exist, getDirectory must fail.</li>\n   *     <li>If create is not true and the path exists, but is a file, getDirectory must fail.</li>\n   *     <li>Otherwise, if no other error occurs, getDirectory must return a DirectoryEntry corresponding to path.</li>\n   *     </ul>\n   * @param successCallback   A callback that is called to return the DirectoryEntry selected or created.\n   * @param errorCallback A callback that is called when errors happen.\n   *\n   */\n  getDirectory(path: string, options?: Flags, successCallback?: DirectoryEntryCallback, errorCallback?: ErrorCallback): void;\n\n  /**\n   * Deletes a directory and all of its contents, if any. In the event of an error [e.g. trying to delete a directory that contains a file that cannot be removed], some of the contents of the directory may be deleted. It is an error to attempt to delete the root directory of a filesystem.\n   * @param successCallback A callback that is called on success.\n   * @param errorCallback A callback that is called when errors happen.\n   */\n  removeRecursively(successCallback: VoidCallback, errorCallback?: ErrorCallback): void;\n}\n\n/**\n * This export interface lets a user list files and directories in a directory. If there are no additions to or deletions from a directory between the first and last call to readEntries, and no errors occur, then:\n * <ul>\n * <li> A series of calls to readEntries must return each entry in the directory exactly once.</li>\n * <li> Once all entries have been returned, the next call to readEntries must produce an empty array.</li>\n * <li> If not all entries have been returned, the array produced by readEntries must not be empty.</li>\n * <li> The entries produced by readEntries must not include the directory itself [\".\"] or its parent [\"..\"].</li>\n * </ul>\n */\nexport interface DirectoryReader {\n  localURL: string;\n  hasReadEntries: boolean;\n  /**\n   * Read the next block of entries from this directory.\n   * @param successCallback Called once per successful call to readEntries to deliver the next previously-unreported set of Entries in the associated Directory. If all Entries have already been returned from previous invocations of readEntries, successCallback must be called with a zero-length array as an argument.\n   * @param errorCallback A callback indicating that there was an error reading from the Directory.\n   */\n  readEntries(successCallback: EntriesCallback, errorCallback?: ErrorCallback): void;\n}\n\n/**\n * This export interface represents a file on a file system.\n */\nexport interface FileEntry extends Entry {\n  /**\n   * Creates a new FileWriter associated with the file that this FileEntry represents.\n   * @param successCallback A callback that is called with the new FileWriter.\n   * @param errorCallback A callback that is called when errors happen.\n   */\n  createWriter(successCallback: FileWriterCallback, errorCallback?: ErrorCallback): void;\n\n  /**\n   * Returns a File that represents the current state of the file that this FileEntry represents.\n   * @param successCallback A callback that is called with the File.\n   * @param errorCallback A callback that is called when errors happen.\n   */\n  file(successCallback: FileCallback, errorCallback?: ErrorCallback): void;\n}\n\n/**\n * When requestFileSystem() succeeds, the following callback is made.\n */\nexport interface FileSystemCallback {\n  /**\n   * @param filesystem The file systems to which the app is granted access.\n   */\n  (filesystem: FileSystem): void;\n}\n\n/**\n * This export interface is the callback used to look up Entry objects.\n */\nexport interface EntryCallback {\n  /**\n   * @param entry\n   */\n  (entry: Entry): void;\n}\n\n/**\n * This export interface is the callback used to look up FileEntry objects.\n */\nexport interface FileEntryCallback {\n  /**\n   * @param entry\n   */\n  (entry: FileEntry): void;\n}\n\n/**\n * This export interface is the callback used to look up DirectoryEntry objects.\n */\nexport interface DirectoryEntryCallback {\n  /**\n   * @param entry\n   */\n  (entry: DirectoryEntry): void;\n}\n\n/**\n * When readEntries() succeeds, the following callback is made.\n */\nexport interface EntriesCallback {\n  (entries: Entry[]): void;\n}\n\n/**\n * This export interface is the callback used to look up file and directory metadata.\n */\nexport interface MetadataCallback {\n  (metadata: Metadata): void;\n}\n\n/**\n * This export interface is the callback used to create a FileWriter.\n */\nexport interface FileWriterCallback {\n  (fileWriter: FileWriter): void;\n}\n\n/**\n * This export interface is the callback used to obtain a File.\n */\nexport interface FileCallback {\n  (file: IFile): void;\n}\n\n/**\n * This export interface is the generic callback used to indicate success of an asynchronous method.\n */\nexport interface VoidCallback {\n  (): void;\n}\n\n/**\n * When an error occurs, the following callback is made.\n */\nexport interface ErrorCallback {\n  (err: FileError): void;\n}\n\nexport interface RemoveResult {\n  success: boolean;\n  fileRemoved: Entry;\n}\n\n/** @hidden */\nexport declare class FileSaver extends EventTarget {\n  /**\n   * When the FileSaver constructor is called, the user agent must return a new FileSaver object with readyState set to INIT.\n   * This constructor must be visible when the script's global object is either a Window object or an object implementing the WorkerUtils interface.\n   */\n  constructor(data: Blob);\n\n  /**\n   * When the abort method is called, user agents must run the steps below:\n   * <ol>\n   * <li> If readyState == DONE or readyState == INIT, terminate this overall series of steps without doing anything else. </li>\n   * <li> Set readyState to DONE. </li>\n   * <li> If there are any tasks from the object's FileSaver task source in one of the task queues, then remove those tasks. </li>\n   * <li> Terminate the write algorithm being processed. </li>\n   * <li> Set the error attribute to a DOMError object of type \"AbortError\". </li>\n   * <li> Fire a progress event called abort </li>\n   * <li> Fire a progress event called writeend </li>\n   * <li> Terminate this algorithm. </li>\n   * </ol>\n   */\n  abort(): void;\n\n  /**\n   * The blob is being written.\n   * @readonly\n   */\n  INIT: number;\n\n  /**\n   * The object has been constructed, but there is no pending write.\n   * @readonly\n   */\n  WRITING: number;\n\n  /**\n   * The entire Blob has been written to the file, an error occurred during the write, or the write was aborted using abort(). The FileSaver is no longer writing the blob.\n   * @readonly\n   */\n  DONE: number;\n\n  /**\n   * The FileSaver object can be in one of 3 states. The readyState attribute, on getting, must return the current state, which must be one of the following values:\n   * <ul>\n   * <li>INIT</li>\n   * <li>WRITING</li>\n   * <li>DONE</li>\n   * <ul>\n   * @readonly\n   */\n  readyState: number;\n\n  /**\n   * The last error that occurred on the FileSaver.\n   * @readonly\n   */\n  error: Error;\n\n  /**\n   * Handler for writestart events\n   */\n  onwritestart: (event: ProgressEvent) => void;\n\n  /**\n   * Handler for progress events.\n   */\n  onprogress: (event: ProgressEvent) => void;\n\n  /**\n   * Handler for write events.\n   */\n  onwrite: (event: ProgressEvent) => void;\n\n  /**\n   * Handler for abort events.\n   */\n  onabort: (event: ProgressEvent) => void;\n\n  /**\n   * Handler for error events.\n   */\n  onerror: (event: ProgressEvent) => void;\n\n  /**\n   * Handler for writeend events.\n   */\n  onwriteend: (event: ProgressEvent) => void;\n}\n\n/**\n * @hidden\n * This interface expands on the FileSaver interface to allow for multiple write actions, rather than just saving a single Blob.\n */\nexport declare class FileWriter extends FileSaver {\n  /**\n   * The byte offset at which the next write to the file will occur. This must be no greater than length.\n   * A newly-created FileWriter must have position set to 0.\n   */\n  position: number;\n\n  /**\n   * The length of the file. If the user does not have read access to the file, this must be the highest byte offset at which the user has written.\n   */\n  length: number;\n\n  /**\n   * Write the supplied data to the file at position.\n   * @param data The blob to write.\n   */\n  write(data: ArrayBuffer | Blob | string): void;\n\n  /**\n   * Seek sets the file position at which the next write will occur.\n   * @param offset If nonnegative, an absolute byte offset into the file. If negative, an offset back from the end of the file.\n   */\n  seek(offset: number): void;\n\n  /**\n   * Changes the length of the file to that specified. If shortening the file, data beyond the new length must be discarded. If extending the file, the existing data must be zero-padded up to the new length.\n   * @param size The size to which the length of the file is to be adjusted, measured in bytes.\n   */\n  truncate(size: number): void;\n}\n\nexport interface IWriteOptions {\n  replace?: boolean;\n  append?: boolean;\n  truncate?: number; // if present, number of bytes to truncate file to before writing\n}\n\n/** @hidden */\nexport declare class FileError {\n  constructor(code: number);\n  static NOT_FOUND_ERR: number;\n  static SECURITY_ERR: number;\n  static ABORT_ERR: number;\n  static NOT_READABLE_ERR: number;\n  static ENCODING_ERR: number;\n  static NO_MODIFICATION_ALLOWED_ERR: number;\n  static INVALID_STATE_ERR: number;\n  static SYNTAX_ERR: number;\n  static INVALID_MODIFICATION_ERR: number;\n  static QUOTA_EXCEEDED_ERR: number;\n  static TYPE_MISMATCH_ERR: number;\n  static PATH_EXISTS_ERR: number;\n  /** Error code */\n  code: number;\n  message: string;\n}\n\n/** @hidden */\nexport declare class FileReader {\n  static EMPTY: number;\n  static LOADING: number;\n  static DONE: number;\n  static READ_CHUNK_SIZE: number;\n\n  readyState: number; // see constants in var declaration below\n  error: Error;\n  result: string | ArrayBuffer; // type depends on readAsXXX() call type\n\n  onloadstart: (evt: ProgressEvent) => void;\n  onprogress: (evt: ProgressEvent) => void;\n  onload: (evt: ProgressEvent) => void;\n  onerror: (evt: ProgressEvent) => void;\n  onloadend: (evt: ProgressEvent) => void;\n  onabort: (evt: ProgressEvent) => void;\n\n  abort(): void;\n  readAsText(fe: IFile, encoding?: string): void;\n  readAsDataURL(fe: IFile): void;\n  readAsBinaryString(fe: IFile): void;\n  readAsArrayBuffer(fe: IFile): void;\n\n  /**\n   * @hidden\n   */\n  [key: string]: any;\n\n}\n\ninterface Window extends LocalFileSystem {}\n\ndeclare const window: Window;\n\n/**\n * @name File\n * @description\n * This plugin implements a File API allowing read/write access to files residing on the device.\n *\n * The File class implements static convenience functions to access files and directories.\n *\n * Example:\n * ```\n * import { File } from '@ionic-native/file';\n *\n * constructor(private file: File) { }\n *\n * ...\n *\n * this.file.checkDir(this.file.dataDirectory, 'mydir').then(_ => console.log('Directory exists')).catch(err => console.log('Directory doesnt exist'));\n *\n * ```\n *\n *  This plugin is based on several specs, including : The HTML5 File API http: //www.w3.org/TR/FileAPI/\n *  The (now-defunct) Directories and System extensions Latest: http: //www.w3.org/TR/2012/WD-file-system-api-20120417/\n *  Although most of the plugin code was written when an earlier spec was current: http: //www.w3.org/TR/2011/WD-file-system-api-20110419/\n *  It also implements the FileWriter spec : http: //dev.w3.org/2009/dap/file-system/file-writer.html\n *  @interfaces\n *  IFile\n *  Entry\n *  DirectoryEntry\n *  DirectoryReader\n *  FileSystem\n */\n@Plugin({\n  pluginName: 'File',\n  plugin: 'cordova-plugin-file',\n  pluginRef: 'cordova.file',\n  repo: 'https://github.com/apache/cordova-plugin-file',\n  platforms: ['Android', 'Browser', 'iOS', 'macOS', 'Windows']\n})\n\nexport class File extends IonicNativePlugin {\n\n  /**\n   *  Read-only directory where the application is installed.\n   */\n  @CordovaProperty\n  applicationDirectory: string;\n\n  /**\n   *  Read-only directory where the application is installed.\n   */\n  @CordovaProperty\n  applicationStorageDirectory: string;\n\n  /**\n   * Where to put app-specific data files.\n   */\n  @CordovaProperty\n  dataDirectory: string;\n\n  /**\n   * Cached files that should survive app restarts.\n   * Apps should not rely on the OS to delete files in here.\n   */\n  @CordovaProperty\n  cacheDirectory: string;\n\n  /**\n   * Android: the application space on external storage.\n   */\n  @CordovaProperty\n  externalApplicationStorageDirectory: string;\n\n  /**\n   *  Android: Where to put app-specific data files on external storage.\n   */\n  @CordovaProperty\n  externalDataDirectory: string;\n\n  /**\n   * Android: the application cache on external storage.\n   */\n  @CordovaProperty\n  externalCacheDirectory: string;\n\n  /**\n   * Android: the external storage (SD card) root.\n   */\n  @CordovaProperty\n  externalRootDirectory: string;\n\n  /**\n   * iOS: Temp directory that the OS can clear at will.\n   */\n  @CordovaProperty\n  tempDirectory: string;\n\n  /**\n   * iOS: Holds app-specific files that should be synced (e.g. to iCloud).\n   */\n  @CordovaProperty\n  syncedDataDirectory: string;\n\n  /**\n   * iOS: Files private to the app, but that are meaningful to other applications (e.g. Office files)\n   */\n  @CordovaProperty\n  documentsDirectory: string;\n\n  /**\n   * BlackBerry10: Files globally available to all apps\n   */\n  @CordovaProperty\n  sharedDirectory: string;\n\n  cordovaFileError: any = {\n    1: 'NOT_FOUND_ERR',\n    2: 'SECURITY_ERR',\n    3: 'ABORT_ERR',\n    4: 'NOT_READABLE_ERR',\n    5: 'ENCODING_ERR',\n    6: 'NO_MODIFICATION_ALLOWED_ERR',\n    7: 'INVALID_STATE_ERR',\n    8: 'SYNTAX_ERR',\n    9: 'INVALID_MODIFICATION_ERR',\n    10: 'QUOTA_EXCEEDED_ERR',\n    11: 'TYPE_MISMATCH_ERR',\n    12: 'PATH_EXISTS_ERR',\n    13: 'WRONG_ENTRY_TYPE',\n    14: 'DIR_READ_ERR',\n  };\n\n  /**\n   * Get free disk space in Bytes\n   * @returns {Promise<number>} Returns a promise that resolves with the remaining free disk space in Bytes\n   */\n  @CordovaCheck()\n  getFreeDiskSpace(): Promise<number> {\n    return new Promise<any>((resolve, reject) => {\n      cordova.exec(resolve, reject, 'File', 'getFreeDiskSpace', []);\n    });\n  }\n\n  /**\n   * Check if a directory exists in a certain path, directory.\n   *\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} dir Name of directory to check\n   * @returns {Promise<boolean>} Returns a Promise that resolves to true if the directory exists or rejects with an error.\n   */\n  @CordovaCheck()\n  checkDir(path: string, dir: string): Promise<boolean> {\n    if ((/^\\//.test(dir))) {\n      let err = new FileError(5);\n      err.message = 'directory cannot start with \\/';\n      return Promise.reject<any>(err);\n    }\n\n    let fullpath = path + dir;\n    return this.resolveDirectoryUrl(fullpath)\n      .then(() => {\n        return true;\n      });\n  }\n\n  /**\n   * Creates a new directory in the specific path.\n   * The replace boolean value determines whether to replace an existing directory with the same name.\n   * If an existing directory exists and the replace value is false, the promise will fail and return an error.\n   *\n   * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} dirName Name of directory to create\n   * @param {boolean} replace If true, replaces file with same name. If false returns error\n   * @returns {Promise<DirectoryEntry>} Returns a Promise that resolves with a DirectoryEntry or rejects with an error.\n   */\n  @CordovaCheck()\n  createDir(path: string, dirName: string, replace: boolean): Promise<DirectoryEntry> {\n    if ((/^\\//.test(dirName))) {\n      let err = new FileError(5);\n      err.message = 'directory cannot start with \\/';\n      return Promise.reject<any>(err);\n    }\n\n    let options: Flags = {\n      create: true\n    };\n\n    if (!replace) {\n      options.exclusive = true;\n    }\n\n    return this.resolveDirectoryUrl(path)\n      .then((fse) => {\n        return this.getDirectory(fse, dirName, options);\n      });\n  }\n\n  /**\n   * Remove a directory at a given path.\n   *\n   * @param {string} path The path to the directory\n   * @param {string} dirName The directory name\n   * @returns {Promise<RemoveResult>} Returns a Promise that resolves to a RemoveResult or rejects with an error.\n   */\n  @CordovaCheck()\n  removeDir(path: string, dirName: string): Promise<RemoveResult> {\n    if ((/^\\//.test(dirName))) {\n      let err = new FileError(5);\n      err.message = 'directory cannot start with \\/';\n      return Promise.reject<any>(err);\n    }\n\n    return this.resolveDirectoryUrl(path)\n      .then((fse) => {\n        return this.getDirectory(fse, dirName, { create: false });\n      })\n      .then((de) => {\n        return this.remove(de);\n      });\n  }\n\n  /**\n   * Move a directory to a given path.\n   *\n   * @param {string} path The source path to the directory\n   * @param {string} dirName The source directory name\n   * @param {string} newPath The destionation path to the directory\n   * @param {string} newDirName The destination directory name\n   * @returns {Promise<DirectoryEntry|Entry>} Returns a Promise that resolves to the new DirectoryEntry object or rejects with an error.\n   */\n  @CordovaCheck()\n  moveDir(path: string, dirName: string, newPath: string, newDirName: string): Promise<DirectoryEntry | Entry> {\n    newDirName = newDirName || dirName;\n\n    if ((/^\\//.test(newDirName))) {\n      let err = new FileError(5);\n      err.message = 'directory cannot start with \\/';\n      return Promise.reject<any>(err);\n    }\n\n    return this.resolveDirectoryUrl(path)\n      .then((fse) => {\n        return this.getDirectory(fse, dirName, { create: false });\n      })\n      .then((srcde) => {\n        return this.resolveDirectoryUrl(newPath)\n          .then((deste) => {\n            return this.move(srcde, deste, newDirName);\n          });\n      });\n  }\n\n  /**\n   * Copy a directory in various methods. If destination directory exists, will fail to copy.\n   *\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} dirName Name of directory to copy\n   * @param {string} newPath Base FileSystem of new location\n   * @param {string} newDirName New name of directory to copy to (leave blank to remain the same)\n   * @returns {Promise<Entry>} Returns a Promise that resolves to the new Entry object or rejects with an error.\n   */\n  @CordovaCheck()\n  copyDir(path: string, dirName: string, newPath: string, newDirName: string): Promise<Entry> {\n    if ((/^\\//.test(newDirName))) {\n      let err = new FileError(5);\n      err.message = 'directory cannot start with \\/';\n      return Promise.reject<any>(err);\n    }\n\n    return this.resolveDirectoryUrl(path)\n      .then((fse) => {\n        return this.getDirectory(fse, dirName, { create: false });\n      })\n      .then((srcde) => {\n        return this.resolveDirectoryUrl(newPath)\n          .then((deste) => {\n            return this.copy(srcde, deste, newDirName);\n          });\n      });\n  }\n\n  /**\n   * List files and directory from a given path.\n   *\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} dirName Name of directory\n   * @returns {Promise<Entry[]>} Returns a Promise that resolves to an array of Entry objects or rejects with an error.\n   */\n  @CordovaCheck()\n  listDir(path: string, dirName: string): Promise<Entry[]> {\n    if ((/^\\//.test(dirName))) {\n      let err = new FileError(5);\n      err.message = 'directory cannot start with \\/';\n      return Promise.reject<Entry[]>(err);\n    }\n\n    return this.resolveDirectoryUrl(path)\n      .then((fse) => {\n        return this.getDirectory(fse, dirName, { create: false, exclusive: false });\n      })\n      .then((de) => {\n        let reader = de.createReader();\n        return this.readEntries(reader);\n      });\n  }\n\n  /**\n   * Removes all files and the directory from a desired location.\n   *\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} dirName Name of directory\n   * @returns {Promise<RemoveResult>} Returns a Promise that resolves with a RemoveResult or rejects with an error.\n   */\n  @CordovaCheck()\n  removeRecursively(path: string, dirName: string): Promise<RemoveResult> {\n    if ((/^\\//.test(dirName))) {\n      let err = new FileError(5);\n      err.message = 'directory cannot start with \\/';\n      return Promise.reject<RemoveResult>(err);\n    }\n\n    return this.resolveDirectoryUrl(path)\n      .then((fse) => {\n        return this.getDirectory(fse, dirName, { create: false });\n      })\n      .then((de) => {\n        return this.rimraf(de);\n      });\n  }\n\n  /**\n   * Check if a file exists in a certain path, directory.\n   *\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} file Name of file to check\n   * @returns {Promise<boolean>} Returns a Promise that resolves with a boolean or rejects with an error.\n   */\n  @CordovaCheck()\n  checkFile(path: string, file: string): Promise<boolean> {\n    if ((/^\\//.test(file))) {\n      let err = new FileError(5);\n      err.message = 'file cannot start with \\/';\n      return Promise.reject<any>(err);\n    }\n\n    return this.resolveLocalFilesystemUrl(path + file)\n      .then((fse) => {\n        if (fse.isFile) {\n          return true;\n        } else {\n          let err = new FileError(13);\n          err.message = 'input is not a file';\n          return Promise.reject<boolean>(err);\n        }\n      });\n  }\n\n  /**\n   * Creates a new file in the specific path.\n   * The replace boolean value determines whether to replace an existing file with the same name.\n   * If an existing file exists and the replace value is false, the promise will fail and return an error.\n   *\n   * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} fileName Name of file to create\n   * @param {boolean} replace If true, replaces file with same name. If false returns error\n   * @returns {Promise<FileEntry>} Returns a Promise that resolves to a FileEntry or rejects with an error.\n   */\n  @CordovaCheck()\n  createFile(path: string, fileName: string, replace: boolean): Promise<FileEntry> {\n    if ((/^\\//.test(fileName))) {\n      let err = new FileError(5);\n      err.message = 'file-name cannot start with \\/';\n      return Promise.reject<any>(err);\n    }\n\n    let options: Flags = {\n      create: true\n    };\n\n    if (!replace) {\n      options.exclusive = true;\n    }\n\n    return this.resolveDirectoryUrl(path)\n      .then((fse) => {\n        return this.getFile(fse, fileName, options);\n      });\n  }\n\n  /**\n   * Removes a file from a desired location.\n   *\n   * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} fileName Name of file to remove\n   * @returns {Promise<RemoveResult>} Returns a Promise that resolves to a RemoveResult or rejects with an error.\n   */\n  @CordovaCheck()\n  removeFile(path: string, fileName: string): Promise<RemoveResult> {\n    if ((/^\\//.test(fileName))) {\n      let err = new FileError(5);\n      err.message = 'file-name cannot start with \\/';\n      return Promise.reject<any>(err);\n    }\n\n    return this.resolveDirectoryUrl(path)\n      .then((fse) => {\n        return this.getFile(fse, fileName, { create: false });\n      })\n      .then((fe) => {\n        return this.remove(fe);\n      });\n  }\n\n  /** Write a new file to the desired location.\n   *\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} fileName path relative to base path\n   * @param {string | Blob} text content or blob to write\n   * @param {IWriteOptions} options replace file if set to true. See WriteOptions for more information.\n   * @returns {Promise<any>} Returns a Promise that resolves to updated file entry or rejects with an error.\n   */\n  @CordovaCheck()\n  writeFile(path: string, fileName: string,\n            text: string | Blob | ArrayBuffer, options: IWriteOptions = {}): Promise<any> {\n    if ((/^\\//.test(fileName))) {\n      const err = new FileError(5);\n      err.message = 'file-name cannot start with \\/';\n      return Promise.reject(err);\n    }\n\n    const getFileOpts: Flags = {\n      create: !options.append,\n      exclusive: !options.replace\n    };\n\n    return this.resolveDirectoryUrl(path)\n      .then((directoryEntry: DirectoryEntry) => {\n        return this.getFile(directoryEntry, fileName, getFileOpts);\n      })\n      .then((fileEntry: FileEntry) => {\n        return this.writeFileEntry(fileEntry, text, options);\n      });\n  }\n\n  /** Write content to FileEntry.\n   *\n   * @hidden\n   * @param {FileEntry} fe file entry object\n   * @param {string | Blob} text content or blob to write\n   * @param {IWriteOptions} options replace file if set to true. See WriteOptions for more information.\n   * @returns {Promise<FileEntry>} Returns a Promise that resolves to updated file entry or rejects with an error.\n   */\n  private writeFileEntry(fe: FileEntry, text: string | Blob | ArrayBuffer, options: IWriteOptions) {\n    return this.createWriter(fe)\n      .then((writer) => {\n        if (options.append) {\n          writer.seek(writer.length);\n        }\n\n        if (options.truncate) {\n          writer.truncate(options.truncate);\n        }\n\n        return this.write(writer, text);\n      })\n      .then(() => fe);\n  }\n\n\n  /** Write to an existing file.\n   *\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} fileName path relative to base path\n   * @param {string | Blob} text content or blob to write\n   * @returns {Promise<void>} Returns a Promise that resolves or rejects with an error.\n   */\n  @CordovaCheck()\n  writeExistingFile(path: string, fileName: string, text: string | Blob): Promise<void> {\n    return this.writeFile(path, fileName, text, { replace: true });\n  }\n\n  /**\n   * Read the contents of a file as text.\n   *\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} file Name of file, relative to path.\n   * @returns {Promise<string>} Returns a Promise that resolves with the contents of the file as string or rejects with an error.\n   */\n  @CordovaCheck()\n  readAsText(path: string, file: string): Promise<string> {\n    return this.readFile<string>(path, file, 'Text');\n  }\n\n  /**\n   * Read file and return data as a base64 encoded data url.\n   * A data url is of the form:\n   *      data: [<mediatype>][;base64],<data>\n\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} file Name of file, relative to path.\n   * @returns {Promise<string>} Returns a Promise that resolves with the contents of the file as data URL or rejects with an error.\n   */\n  @CordovaCheck()\n  readAsDataURL(path: string, file: string): Promise<string> {\n    return this.readFile<string>(path, file, 'DataURL');\n  }\n\n  /**\n   * Read file and return data as a binary data.\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} file Name of file, relative to path.\n   * @returns {Promise<string>} Returns a Promise that resolves with the contents of the file as string rejects with an error.\n   */\n  @CordovaCheck()\n  readAsBinaryString(path: string, file: string): Promise<string> {\n    return this.readFile<string>(path, file, 'BinaryString');\n  }\n\n  /**\n   * Read file and return data as an ArrayBuffer.\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} file Name of file, relative to path.\n   * @returns {Promise<ArrayBuffer>} Returns a Promise that resolves with the contents of the file as ArrayBuffer or rejects with an error.\n   */\n  @CordovaCheck()\n  readAsArrayBuffer(path: string, file: string): Promise<ArrayBuffer> {\n    return this.readFile<ArrayBuffer>(path, file, 'ArrayBuffer');\n  }\n\n  private readFile<T>(path: string, file: string, readAs: 'ArrayBuffer' | 'BinaryString' | 'DataURL' | 'Text'): Promise<T> {\n    if ((/^\\//.test(file))) {\n      let err = new FileError(5);\n      err.message = 'file-name cannot start with \\/';\n      return Promise.reject<any>(err);\n    }\n\n    return this.resolveDirectoryUrl(path)\n      .then((directoryEntry: DirectoryEntry) => {\n        return this.getFile(directoryEntry, file, { create: false });\n      })\n      .then((fileEntry: FileEntry) => {\n        const reader = new FileReader();\n        return new Promise<T>((resolve, reject) => {\n          reader.onloadend = () => {\n            if (reader.result !== undefined || reader.result !== null) {\n              resolve(<T><any>reader.result);\n            } else if (reader.error !== undefined || reader.error !== null) {\n              reject(reader.error);\n            } else {\n              reject({ code: null, message: 'READER_ONLOADEND_ERR' });\n            }\n          };\n\n          fileEntry.file(file => {\n            reader[`readAs${readAs}`].call(reader, file);\n          }, error => {\n            reject(error);\n          });\n\n        });\n      });\n  }\n\n  /**\n   * Move a file to a given path.\n   *\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} fileName Name of file to move\n   * @param {string} newPath Base FileSystem of new location\n   * @param {string} newFileName New name of file to move to (leave blank to remain the same)\n   * @returns {Promise<Entry>} Returns a Promise that resolves to the new Entry or rejects with an error.\n   */\n  @CordovaCheck()\n  moveFile(path: string, fileName: string, newPath: string, newFileName: string): Promise<Entry> {\n    newFileName = newFileName || fileName;\n\n    if ((/^\\//.test(newFileName))) {\n      let err = new FileError(5);\n      err.message = 'file name cannot start with \\/';\n      return Promise.reject<any>(err);\n    }\n\n    return this.resolveDirectoryUrl(path)\n      .then((fse) => {\n        return this.getFile(fse, fileName, { create: false });\n      })\n      .then((srcfe) => {\n        return this.resolveDirectoryUrl(newPath)\n          .then((deste) => {\n            return this.move(srcfe, deste, newFileName);\n          });\n      });\n  }\n\n  /**\n   * Copy a file in various methods. If file exists, will fail to copy.\n   *\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n   * @param {string} fileName Name of file to copy\n   * @param {string} newPath Base FileSystem of new location\n   * @param {string} newFileName New name of file to copy to (leave blank to remain the same)\n   * @returns {Promise<Entry>} Returns a Promise that resolves to an Entry or rejects with an error.\n   */\n  @CordovaCheck()\n  copyFile(path: string, fileName: string, newPath: string, newFileName: string): Promise<Entry> {\n    newFileName = newFileName || fileName;\n\n    if ((/^\\//.test(newFileName))) {\n      let err = new FileError(5);\n      err.message = 'file name cannot start with \\/';\n      return Promise.reject<any>(err);\n    }\n\n    return this.resolveDirectoryUrl(path)\n      .then((fse) => {\n        return this.getFile(fse, fileName, { create: false });\n      })\n      .then((srcfe) => {\n        return this.resolveDirectoryUrl(newPath)\n          .then((deste) => {\n            return this.copy(srcfe, deste, newFileName);\n          });\n      });\n  }\n\n  /**\n   * @hidden\n   */\n  private fillErrorMessage(err: FileError): void {\n    try {\n      err.message = this.cordovaFileError[err.code];\n    } catch (e) { }\n  }\n\n  /**\n   * Resolves a local file system URL\n   * @param fileUrl {string} file system url\n   * @returns {Promise<Entry>}\n   */\n  @CordovaCheck()\n  resolveLocalFilesystemUrl(fileUrl: string): Promise<Entry> {\n    return new Promise<Entry>((resolve, reject) => {\n      try {\n        window.resolveLocalFileSystemURL(fileUrl, (entry: Entry) => {\n          resolve(entry);\n        }, (err) => {\n          this.fillErrorMessage(err);\n          reject(err);\n        });\n      } catch (xc) {\n        this.fillErrorMessage(xc);\n        reject(xc);\n      }\n    });\n  }\n\n  /**\n   * Resolves a local directory url\n   * @param directoryUrl {string} directory system url\n   * @returns {Promise<DirectoryEntry>}\n   */\n  @CordovaCheck()\n  resolveDirectoryUrl(directoryUrl: string): Promise<DirectoryEntry> {\n    return this.resolveLocalFilesystemUrl(directoryUrl)\n      .then((de) => {\n        if (de.isDirectory) {\n          return <DirectoryEntry>de;\n        } else {\n          const err = new FileError(13);\n          err.message = 'input is not a directory';\n          return Promise.reject<DirectoryEntry>(err);\n        }\n      });\n  }\n\n  /**\n   * Get a directory\n   * @param directoryEntry {DirectoryEntry} Directory entry, obtained by resolveDirectoryUrl method\n   * @param directoryName {string} Directory name\n   * @param flags {Flags} Options\n   * @returns {Promise<DirectoryEntry>}\n   */\n  @CordovaCheck()\n  getDirectory(directoryEntry: DirectoryEntry, directoryName: string, flags: Flags): Promise<DirectoryEntry> {\n    return new Promise<DirectoryEntry>((resolve, reject) => {\n      try {\n        directoryEntry.getDirectory(directoryName, flags, (de) => {\n          resolve(de);\n        }, (err) => {\n          this.fillErrorMessage(err);\n          reject(err);\n        });\n      } catch (xc) {\n        this.fillErrorMessage(xc);\n        reject(xc);\n      }\n    });\n  }\n\n  /**\n   * Get a file\n   * @param directoryEntry {DirectoryEntry} Directory entry, obtained by resolveDirectoryUrl method\n   * @param fileName {string} File name\n   * @param flags {Flags} Options\n   * @returns {Promise<FileEntry>}\n   */\n  @CordovaCheck()\n  getFile(directoryEntry: DirectoryEntry, fileName: string, flags: Flags): Promise<FileEntry> {\n    return new Promise<FileEntry>((resolve, reject) => {\n      try {\n        directoryEntry.getFile(fileName, flags, resolve, (err) => {\n          this.fillErrorMessage(err);\n          reject(err);\n        });\n      } catch (xc) {\n        this.fillErrorMessage(xc);\n        reject(xc);\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  private remove(fe: Entry): Promise<RemoveResult> {\n    return new Promise<RemoveResult>((resolve, reject) => {\n      fe.remove(() => {\n        resolve({ success: true, fileRemoved: fe });\n      }, (err) => {\n        this.fillErrorMessage(err);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  private move(srce: Entry, destdir: DirectoryEntry, newName: string): Promise<Entry> {\n    return new Promise<Entry>((resolve, reject) => {\n      srce.moveTo(destdir, newName, (deste) => {\n        resolve(deste);\n      }, (err) => {\n        this.fillErrorMessage(err);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  private copy(srce: Entry, destdir: DirectoryEntry, newName: string): Promise<Entry> {\n    return new Promise<Entry>((resolve, reject) => {\n      srce.copyTo(destdir, newName, (deste) => {\n        resolve(deste);\n      }, (err) => {\n        this.fillErrorMessage(err);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  private readEntries(dr: DirectoryReader): Promise<Entry[]> {\n    return new Promise<Entry[]>((resolve, reject) => {\n      dr.readEntries((entries) => {\n        resolve(entries);\n      }, (err) => {\n        this.fillErrorMessage(err);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  private rimraf(de: DirectoryEntry): Promise<RemoveResult> {\n    return new Promise<RemoveResult>((resolve, reject) => {\n      de.removeRecursively(() => {\n        resolve({ success: true, fileRemoved: de });\n      }, (err) => {\n        this.fillErrorMessage(err);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  private createWriter(fe: FileEntry): Promise<FileWriter> {\n    return new Promise<FileWriter>((resolve, reject) => {\n      fe.createWriter((writer) => {\n        resolve(writer);\n      }, (err) => {\n        this.fillErrorMessage(err);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  private write(writer: FileWriter, gu: string | Blob | ArrayBuffer): Promise<any> {\n    if (gu instanceof Blob) {\n      return this.writeFileInChunks(writer, gu);\n    }\n\n    return new Promise<any>((resolve, reject) => {\n      writer.onwriteend = (evt) => {\n        if (writer.error) {\n          reject(writer.error);\n        } else {\n          resolve(evt);\n        }\n      };\n      writer.write(gu);\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  private writeFileInChunks(writer: FileWriter, file: Blob) {\n    const BLOCK_SIZE = 1024 * 1024;\n    let writtenSize = 0;\n\n    function writeNextChunk() {\n      const size = Math.min(BLOCK_SIZE, file.size - writtenSize);\n      const chunk = file.slice(writtenSize, writtenSize + size);\n\n      writtenSize += size;\n      writer.write(chunk);\n    }\n\n    return new Promise<any>((resolve, reject) => {\n      writer.onerror = reject;\n      writer.onwrite = () => {\n        if (writtenSize < file.size) {\n          writeNextChunk();\n        } else {\n          resolve();\n        }\n      };\n      writeNextChunk();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}