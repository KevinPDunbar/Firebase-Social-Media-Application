{"version":3,"sources":["../../../src/@ionic-native/plugins/media-capture/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,eAAA,EAAiB,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACzF,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAgH7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AASH;IAAkC,gCAAiB;IAAnD;;IAwFA,CAAC;IAlEC;;;;OAIG;IAIH,mCAAY,GAAZ,UAAa,OAA6B;QACxC,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAIH,mCAAY,GAAZ,UAAa,OAA6B;QACxC,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAIH,mCAAY,GAAZ,UAAa,OAA6B;QACxC,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAKH,6CAAsB,GAAtB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAKH,4CAAqB,GAArB;QACE,MAAM,CAAC;IACT,CAAC;IAEI,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,2BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAjFA;QADC,eAAe;;6DACyB;IAOzC;QADC,eAAe;;6DACyB;IAOzC;QADC,eAAe;;6DACyB;IAUzC;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;oDAGD;IAUD;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;oDAGD;IAUD;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;oDAGD;IAUD;QAJC,OAAO,CAAC;YACP,eAAe,EAAE,IAAI;YACrB,KAAK,EAAE,sBAAsB;SAC9B,CAAC;;;wCACwB,UAAU;8DAEnC;IAUD;QAJC,OAAO,CAAC;YACP,eAAe,EAAE,IAAI;YACrB,KAAK,EAAE,qBAAqB;SAC7B,CAAC;;;wCACuB,UAAU;6DAElC;IAhFU,YAAY;QARxB,MAAM,CAAC;YACN,UAAU,EAAE,cAAc;YAC1B,MAAM,EAAE,8BAA8B;YACtC,SAAS,EAAE,0BAA0B;YACrC,IAAI,EAAE,wDAAwD;YAC9D,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACpD,CAAC;OAEW,YAAY,CAwFxB;IAAD,mBAAC;CAxFD,AAwFC,CAxFiC,iBAAiB,GAwFlD;SAxFY,YAAY","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, CordovaProperty, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\ndeclare const navigator: any;\n\nexport interface MediaFile {\n  /**\n   * The name of the file, without path information.\n   */\n  name: string;\n  /**\n   * The full path of the file, including the name.\n   */\n  fullPath: string;\n  /**\n   * The file's mime type\n   */\n  type: string;\n\n  /**\n   * The date and time when the file was last modified.\n   */\n  lastModifiedDate: Date;\n\n  /**\n   * The size of the file, in bytes.\n   */\n  size: number;\n\n  /**\n   * Retrieves the format information of the media file.\n   * @param {Function} successCallback\n   * @param {Function} errorCallback\n   */\n  getFormatData(successCallback: (data: MediaFileData) => any, errorCallback?: (err: any) => any): void;\n}\n\nexport interface MediaFileData {\n  /**\n   * The actual format of the audio and video content.\n   */\n  codecs: string;\n  /**\n   * The average bitrate of the content. The value is zero for images.\n   */\n  bitrate: number;\n  /**\n   * The height of the image or video in pixels. The value is zero for audio clips.\n   */\n  height: number;\n  /**\n   * The width of the image or video in pixels. The value is zero for audio clips.\n   */\n  width: number;\n  /**\n   * The length of the video or sound clip in seconds. The value is zero for images.\n   */\n  duration: number;\n}\n\nexport interface CaptureError {\n  code: string;\n}\n\nexport interface CaptureAudioOptions {\n  /**\n   * Maximum number of audio clips. Defaults to 1.\n   * On iOS you can only record one file.\n   */\n  limit?: number;\n  /**\n   * Maximum duration of an audio sound clip, in seconds. This does not work on Android devices.\n   */\n  duration?: number;\n}\n\nexport interface CaptureImageOptions {\n  /**\n   * Maximum number of images to capture. This limit is not supported on iOS, only one image will be taken per invocation.\n   */\n  limit?: number;\n}\n\nexport interface CaptureVideoOptions {\n  /**\n   * Maximum number of video clips to record. This value is ignored on iOS, only one video clip can be taken per invocation.\n   */\n  limit?: number;\n  /**\n   * Maximum duration per video clip. This will be ignored on BlackBerry.\n   */\n  duration?: number;\n  /**\n   * Quality of the video. This parameter can only be used with Android.\n   */\n  quality?: number;\n}\n\nexport interface ConfigurationData {\n  /**\n   * The ASCII-encoded lowercase string representing the media type.\n   */\n    type: string;\n  /**\n   * The height of the image or video in pixels. The value is zero for sound clips.\n   */\n  height: number;\n  /**\n   * The width of the image or video in pixels. The value is zero for sound clips.\n   */\n  width: number;\n}\n\n/**\n * @name Media Capture\n * @description\n * @usage\n * ```typescript\n * import { MediaCapture, MediaFile, CaptureError, CaptureImageOptions } from '@ionic-native/media-capture';\n *\n *\n * constructor(private mediaCapture: MediaCapture) { }\n *\n * ...\n *\n *\n * let options: CaptureImageOptions = { limit: 3 };\n * this.mediaCapture.captureImage(options)\n *   .then(\n *     (data: MediaFile[]) => console.log(data),\n *     (err: CaptureError) => console.error(err)\n *   );\n *\n * ```\n * @interfaces\n * MediaFile\n * MediaFileData\n * CaptureError\n * CaptureAudioOptions\n * CaptureImageOptions\n * CaptureVideoOptions\n * ConfigurationData\n */\n@Plugin({\n  pluginName: 'MediaCapture',\n  plugin: 'cordova-plugin-media-capture',\n  pluginRef: 'navigator.device.capture',\n  repo: 'https://github.com/apache/cordova-plugin-media-capture',\n  platforms: ['Android', 'Browser', 'iOS', 'Windows']\n})\n\nexport class MediaCapture extends IonicNativePlugin {\n  /**\n   * The recording image sizes and formats supported by the device.\n   * @returns {ConfigurationData[]}\n   */\n  @CordovaProperty\n  supportedImageModes: ConfigurationData[];\n\n  /**\n   * The audio recording formats supported by the device.\n   * @returns {ConfigurationData[]}\n   */\n  @CordovaProperty\n  supportedAudioModes: ConfigurationData[];\n\n  /**\n   * The recording video resolutions and formats supported by the device.\n   * @returns {ConfigurationData[]}\n   */\n  @CordovaProperty\n  supportedVideoModes: ConfigurationData[];\n\n  /**\n   * Start the audio recorder application and return information about captured audio clip files.\n   * @param options\n   * @returns {Promise<MediaFile[]>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  captureAudio(options?: CaptureAudioOptions): Promise<MediaFile[] | CaptureError> {\n    return;\n  }\n\n  /**\n   * Start the camera application and return information about captured image files.\n   * @param options\n   * @returns {Promise<MediaFile[]>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  captureImage(options?: CaptureImageOptions): Promise<MediaFile[] | CaptureError> {\n    return;\n  }\n\n  /**\n   * Start the video recorder application and return information about captured video clip files.\n   * @param options\n   * @returns {Promise<MediaFile[]>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  captureVideo(options?: CaptureVideoOptions): Promise<MediaFile[] | CaptureError> {\n    return;\n  }\n\n  /**\n   * is fired if the capture call is successful\n   * @returns {Observable<MediaFile[]>}\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'pendingcaptureresult'\n  })\n  onPendingCaptureResult(): Observable<MediaFile[]> {\n    return;\n  }\n\n  /**\n   * is fired if the capture call is unsuccessful\n   * @returns {Observable<CaptureError>}\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'pendingcaptureerror'\n  })\n  onPendingCaptureError(): Observable<CaptureError> {\n    return;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}