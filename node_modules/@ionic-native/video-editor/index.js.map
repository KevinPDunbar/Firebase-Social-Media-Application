{"version":3,"sources":["../../../src/@ionic-native/plugins/video-editor/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAwHxE;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AASH;IAAiC,+BAAiB;IARlD;QAAA,qEAqEC;QA3DC,2BAAqB,GAAG;YACtB,EAAE,EAAE,CAAC;YACL,GAAG,EAAE,CAAC;SACP,CAAC;QAEF,oBAAc,GAAG;YACf,GAAG,EAAE,CAAC;YACN,KAAK,EAAE,CAAC;YACR,GAAG,EAAE,CAAC;YACN,UAAU,EAAE,CAAC;SACd,CAAC;;IAiDJ,CAAC;IA/CC;;;;OAIG;IAIH,oCAAc,GAAd,UAAe,OAAyB,IAAqB,MAAM,CAAC,CAAC,CAAC;IAEtE;;;;OAIG;IAKH,0BAAI,GAAJ,UAAK,OAAoB,IAAqB,MAAM,CAAC,CAAC,CAAC;IAEvD;;;;OAIG;IAIH,qCAAe,GAAf,UAAgB,OAA+B,IAAqB,MAAM,CAAC,CAAC,CAAC;IAE7E;;;;OAIG;IAIH,kCAAY,GAAZ,UAAa,OAA4B,IAAwB,MAAM,CAAC,CAAC,CAAC;IAErE,sBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,0BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAtCA;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;qDACoE;IAWtE;QAJC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;YACxB,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;;;;2CACqD;IAUvD;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;sDAC2E;IAU7E;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;mDACwE;IArD/D,WAAW;QARvB,MAAM,CAAC;YACN,UAAU,EAAE,aAAa;YACzB,MAAM,EAAE,6BAA6B;YACrC,SAAS,EAAE,aAAa;YACxB,IAAI,EAAE,wDAAwD;YAC9D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,iBAAiB,CAAC;SAC5D,CAAC;OAEW,WAAW,CA6DvB;IAAD,kBAAC;CA7DD,AA6DC,CA7DgC,iBAAiB,GA6DjD;SA7DY,WAAW","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface TranscodeOptions {\n\n  /** The path to the video on the device. */\n  fileUri: string;\n\n  /** The file name for the transcoded video */\n  outputFileName: string;\n\n  /** Instructions on how to encode the video. Android is always mp4 */\n  outputFileType?: number;\n\n  /** Should the video be processed with quailty or speed in mind. iOS only */\n  optimizeForNetworkUse?: number;\n\n  /** Save the new video the library. Not supported in windows. Defaults to true */\n  saveToLibrary?: boolean;\n\n  /** Delete the original video. Android only. Defaults to false */\n  deleteInputFile?: boolean;\n\n  /** iOS only. Defaults to true */\n  maintainAspectRatio?: boolean;\n\n  /** Width of the result */\n  width?: number;\n\n  /** Height of the result */\n  height?: number;\n\n  /** Bitrate in bits. Defaults to 1 megabit (1000000). */\n  videoBitrate?: number;\n\n  /** Frames per second of the result. Android only. Defaults to 24. */\n  fps?: number;\n\n  /** Number of audio channels. iOS only. Defaults to 2. */\n  audioChannels?: number;\n\n  /** Sample rate for the audio. iOS only. Defaults to 44100*/\n  audioSampleRate?: number;\n\n  /** Sample rate for the audio. iOS only. Defaults to 128 kilobits (128000). */\n  audioBitrate?: number;\n\n  /** Not supported in windows, progress on the transcode. info will be a number from 0 to 100 */\n  progress?: (info: number) => void;\n}\n\nexport interface TrimOptions {\n\n  /** Path to input video. */\n  fileUri: string;\n\n  /** Time to start trimming in seconds */\n  trimStart: number;\n\n  /** Time to end trimming in seconds */\n  trimEnd: number;\n\n  /** Output file name */\n  outputFileName: string;\n\n  /** Progress on transcode. info will be a number from 0 to 100 */\n  progress?: (info: any) => void;\n\n}\n\nexport interface CreateThumbnailOptions {\n\n  /** The path to the video on the device */\n  fileUri: string;\n\n  /** The file name for the JPEG image */\n  outputFileName: string;\n\n  /** Location in the video to create the thumbnail (in seconds) */\n  atTime?: number;\n\n  /** Width of the thumbnail. */\n  width?: number;\n\n  /** Height of the thumbnail. */\n  height?: number;\n\n  /** Quality of the thumbnail (between 1 and 100). */\n  quality?: number;\n\n}\n\nexport interface GetVideoInfoOptions {\n\n  /** The path to the video on the device. */\n  fileUri: string;\n\n}\n\nexport interface VideoInfo {\n\n  /** Width of the video in pixels. */\n  width: number;\n\n  /** Height of the video in pixels. */\n  height: number;\n\n  /** Orientation of the video. Will be either portrait or landscape. */\n  orientation: 'portrait' | 'landscape';\n\n  /** Duration of the video in seconds. */\n  duration: number;\n\n  /** Size of the video in bytes. */\n  size: number;\n\n  /** Bitrate of the video in bits per second. */\n  bitrate: number;\n\n}\n\n/**\n * @name Video Editor\n * @description Edit videos using native device APIs\n *\n * @usage\n * ```typescript\n * import { VideoEditor } from '@ionic-native/video-editor';\n *\n * constructor(private videoEditor: VideoEditor) { }\n *\n * ...\n *\n * this.videoEditor.transcodeVideo({\n *   fileUri: '/path/to/input.mov',\n *   outputFileName: 'output.mp4',\n *   outputFileType: VideoEditor.OutputFileType.MPEG4\n * })\n * .then((fileUri: string) => console.log('video transcode success', fileUri))\n * .catch((error: any) => console.log('video transcode error', error));\n *\n * ```\n * @interfaces\n * TranscodeOptions\n * TrimOptions\n * CreateThumbnailOptions\n * GetVideoInfoOptions\n * VideoInfo\n */\n@Plugin({\n  pluginName: 'VideoEditor',\n  plugin: 'cordova-plugin-video-editor',\n  pluginRef: 'VideoEditor',\n  repo: 'https://github.com/jbavari/cordova-plugin-video-editor',\n  platforms: ['Android', 'iOS', 'Windows', 'Windows Phone 8']\n})\n\nexport class VideoEditor extends IonicNativePlugin {\n\n  OptimizeForNetworkUse = {\n    NO: 0,\n    YES: 1\n  };\n\n  OutputFileType = {\n    M4V: 0,\n    MPEG4: 1,\n    M4A: 2,\n    QUICK_TIME: 3\n  };\n\n  /**\n   * Transcode a video\n   * @param options {TranscodeOptions} Options\n   * @returns {Promise<string>} Returns a promise that resolves to the path of the transcoded video\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  transcodeVideo(options: TranscodeOptions): Promise<string> { return; }\n\n  /**\n   * Trim a video\n   * @param options {TrimOptions} Options\n   * @returns {Promise<string>} Returns a promise that resolves to the path of the trimmed video\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    platforms: ['iOS']\n  })\n  trim(options: TrimOptions): Promise<string> { return; }\n\n  /**\n   * Create a JPEG thumbnail from a video\n   * @param options {CreateThumbnailOptions} Options\n   * @returns {Promise<string>} Returns a promise that resolves to the path to the jpeg image on the device\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  createThumbnail(options: CreateThumbnailOptions): Promise<string> { return; }\n\n  /**\n   * Get info on a video (width, height, orientation, duration, size, & bitrate)\n   * @param options {GetVideoInfoOptions} Options\n   * @returns {Promise<VideoInfo>} Returns a promise that resolves to an object containing info on the video\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getVideoInfo(options: GetVideoInfoOptions): Promise<VideoInfo> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}